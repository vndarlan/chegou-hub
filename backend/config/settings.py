# backend/config/settings.py
"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Carregar variáveis de ambiente do .env ---
# Útil para desenvolvimento LOCAL. No Railway, use as variáveis de ambiente da plataforma.
load_dotenv(os.path.join(BASE_DIR, '.env'))
# --- Fim do carregamento do .env ---

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# <<< LER DO AMBIENTE, padrão é False (produção) >>>
DEBUG = os.getenv('DEBUG', 'False') == 'True'

# --- Configuração ALLOWED_HOSTS para produção ---
ALLOWED_HOSTS_STRING = os.getenv('ALLOWED_HOSTS', '')
ALLOWED_HOSTS = []
if ALLOWED_HOSTS_STRING:
    ALLOWED_HOSTS.extend(ALLOWED_HOSTS_STRING.split(','))

# Adiciona a URL pública que o Railway dá para seu app (se disponível em env)
RAILWAY_STATIC_URL = os.getenv('RAILWAY_STATIC_URL')
if RAILWAY_STATIC_URL and '/' in RAILWAY_STATIC_URL:
    RAILWAY_HOSTNAME = RAILWAY_STATIC_URL.split('/')[0]
    if RAILWAY_HOSTNAME not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append(RAILWAY_HOSTNAME)

# Adiciona localhost e 127.0.0.1 se estiver em modo DEBUG para testes locais
if DEBUG:
    ALLOWED_HOSTS.append('localhost')
    ALLOWED_HOSTS.append('127.0.0.1')
    if not SECRET_KEY:
       SECRET_KEY = 'django-insecure-fallback-key-change-this-in-real-env-or-prod'
       print("\n\nAVISO: Usando SECRET_KEY de fallback para DEBUG. Defina DJANGO_SECRET_KEY no .env\n\n")
elif not SECRET_KEY:
    # Em produção (não DEBUG), SECRET_KEY É OBRIGATÓRIA
    raise ValueError("ERRO CRÍTICO: DJANGO_SECRET_KEY não definida no ambiente de produção!")
# --- Fim ALLOWED_HOSTS ---

# --- Chave da API OpenAI ---
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
if not OPENAI_API_KEY and DEBUG:
    print("AVISO: OPENAI_API_KEY não está definida no arquivo .env!")
# --- Fim da chave OpenAI ---

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'core.apps.CoreConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'config.wsgi.application' # Mantido para compatibilidade
ASGI_APPLICATION = 'config.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# --- Configuração do Banco de Dados ---
DATABASE_URL_INTERNAL = os.getenv('DATABASE_URL')
DATABASE_URL_PUBLIC = os.getenv('DATABASE_PUBLIC_URL')

DATABASES = {}

if DATABASE_URL_PUBLIC:
    print("INFO: Configurando banco de dados usando URL PÚBLICA (parse manual).")
    try:
        url = urlparse(DATABASE_URL_PUBLIC)
        DATABASES['default'] = {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': url.path[1:],
            'USER': url.username,
            'PASSWORD': url.password,
            'HOST': url.hostname,
            'PORT': url.port,
            'OPTIONS': {'sslmode': 'require'}
        }
    except Exception as e:
        print(f"ERRO: Falha ao parsear DATABASE_PUBLIC_URL: {e}")

if not DATABASES and DATABASE_URL_INTERNAL:
    print(f"INFO: Configurando banco de dados usando URL INTERNA (Pública falhou ou não encontrada).")
    try:
        DATABASES = {
            'default': dj_database_url.config(
                default=DATABASE_URL_INTERNAL,
                conn_max_age=600,
                conn_health_checks=True,
                ssl_require=os.getenv('DB_SSL_REQUIRE', 'True') == 'True'
            )
        }
    except Exception as e:
        print(f"ERRO: Falha ao configurar com DATABASE_URL interna via dj_database_url: {e}")

# Fallback final para SQLite se tudo mais falhar
if not DATABASES:
    print("AVISO: Nenhuma URL de banco de dados válida encontrada. Usando SQLite local (db.sqlite3).")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
# --- Fim da configuração do Banco de Dados ---


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'
TIME_ZONE = 'America/Sao_Paulo'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# --- Configurações de Estáticos para Produção com Whitenoise ---
STATIC_ROOT = BASE_DIR / 'staticfiles'

# <<< Storage OBRIGATÓRIO para Whitenoise (Django >= 4.2) >>>
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

STATICFILES_DIRS = [
    BASE_DIR / 'static_files',
]

# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Configuração do CORS ---
# <<< MODIFICADO para ler origens do ambiente >>>
CORS_ALLOWED_ORIGINS_STRING = os.getenv('CORS_ALLOWED_ORIGINS', '')
CORS_ALLOWED_ORIGINS = [
    "https://chegouhub.up.railway.app",
    "https://chegou-hubb-production.up.railway.app",
    "https://www.chegouhub.up.railway.app",
    "http://chegouhub.up.railway.app",  # Para ambientes de desenvolvimento
]
if DEBUG:
    # Permitir localhost em DEBUG
    CORS_ALLOWED_ORIGINS.extend([
        "http://localhost:3000",
        "http://127.0.0.1:3000",
    ])
if CORS_ALLOWED_ORIGINS_STRING:
    # Adiciona URLs do ambiente
    CORS_ALLOWED_ORIGINS.extend([origin.strip() for origin in CORS_ALLOWED_ORIGINS_STRING.split(',')])

# Atualize CSRF_TRUSTED_ORIGINS - deve incluir a mesma lista
CSRF_TRUSTED_ORIGINS = [
    "https://chegouhub.up.railway.app", 
    "https://chegou-hubb-production.up.railway.app",
    "https://www.chegouhub.up.railway.app",
    "http://chegouhub.up.railway.app",  # Para ambientes de desenvolvimento
]
if DEBUG:
    CSRF_TRUSTED_ORIGINS.extend([
        'http://localhost:3000',
        'http://127.0.0.1:3000',
    ])
# Corrigi para usar CORS_ALLOWED_ORIGINS_STRING já que CSRF_TRUSTED_ORIGINS_STRING não existe
if CORS_ALLOWED_ORIGINS_STRING:
    # Adiciona URLs do ambiente
    CSRF_TRUSTED_ORIGINS.extend([origin.strip() for origin in CORS_ALLOWED_ORIGINS_STRING.split(',')])

# Configurações CORS adicionais
CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',  # Adicionado
    'pragma',         # Adicionado
]

# Configurações CSRF Cookie ajustadas
CSRF_COOKIE_SECURE = not DEBUG  # True em produção, False em desenvolvimento
CSRF_COOKIE_SAMESITE = 'Lax' if DEBUG else 'None'  # 'None' requer HTTPS em produção
CSRF_COOKIE_HTTPONLY = False  # Precisa ser acessível por JavaScript
CSRF_USE_SESSIONS = False  # Armazenar em cookies é mais simples para APIs
CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'  # Corresponde ao axios.defaults.xsrfHeaderName = 'X-CSRFToken'

# <<< Ajustes de Segurança para Produção (HTTPS) >>>
if not DEBUG: # Em produção
    CSRF_COOKIE_SECURE = True   # OBRIGATÓRIO para SameSite=None
    CSRF_COOKIE_SAMESITE = 'None' # Permite envio cross-site (diferentes subdomínios)
else: # Em desenvolvimento (DEBUG=True)
    CSRF_COOKIE_SECURE = False
    CSRF_COOKIE_SAMESITE = 'Lax' 

# Configuração de domínio para cookies CSRF (NOVA CONFIGURAÇÃO)
CSRF_COOKIE_DOMAIN = '.railway.app'  # Permite compartilhar cookies entre subdomínios

# --- Configuração REST Framework (sem mudanças) ---
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}
# --- Fim REST Framework ---

# <<< Logging (Opcional, mas útil para depuração no Railway) >>>
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO', # Mude para 'DEBUG' para mais detalhes
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}